"""

## Adding existing ASDF tags as a field
Type annotation must be added to the field to specify the ASDF tag to use in the
ASDF schema. There are a few options to do this:

- Use {py:class}`AsdfTag` to specify the tag URI.
- Use {py:class}`WithAsdfSchema` and pass in a dictionary to extend the schema with
additional properties. The key `"$ref"` can be used to specify the tag URI.

```py
from asdf_pydantic import AsdfPydanticModel
from asdf_pydantic.schema import AsdfTag
from astropy.table import Table

class MyModel(AsdfPydanticModel):
    table: Annotated[Table, AsdfTag("http://stsci.edu/schemas/asdf.org/table/table-1.1.0")]
```

For more customization of the ASDF schema output, you can use {py:class}`WithAsdfSchema` to
extend the schema with additional properties.

```py
# Changing the title of the field
table: Annotated[
    Table,
    WithAsdfSchema({
        "title": "TABLE",
        "$ref": "http://stsci.edu/schemas/asdf.org/table/table-1.1.0"
    }),
]
```
"""

import importlib
import inspect
import logging
import re
import shutil
from pathlib import Path
from types import ModuleType
from typing import Literal, Optional

from asdf.resource import DirectoryResourceMapping
from pydantic import WithJsonSchema
from pydantic.json_schema import GenerateJsonSchema

log = logging.getLogger(__name__)

DEFAULT_ASDF_SCHEMA_REF_TEMPLATE = "#/definitions/{model}"
DESIRED_ASDF_SCHEMA_KEY_ORDER = (
    "$schema",
    "id",
    "title",
    "type",
    "properties",
    "allOf",
    "anyOf",
    "required",
    "definitions",
)


class GenerateAsdfSchema(GenerateJsonSchema):
    """Generates ASDF-compatible schema from Pydantic's default JSON schema generator.

    ```{caution} Experimental
    This schema generator is not complete. It currently creates JSON 2020-12
    schema (despite `$schema` says it's `asdf-schema-1.0.0`) which are not
    compatible with ASDF.
    ```
    """

    # HACK: When we can support tree models, then not all schema should have tag
    schema_dialect = "http://stsci.edu/schemas/asdf/asdf-schema-1.0.0"

    def __init__(
        self,
        by_alias: bool = True,
        ref_template: str = DEFAULT_ASDF_SCHEMA_REF_TEMPLATE,
        tag_uri: Optional[str] = None,
    ):
        super().__init__(by_alias=by_alias, ref_template=ref_template)
        self.tag_uri = tag_uri

    def generate(self, schema, mode="validation"):
        json_schema = super().generate(schema, mode)  # noqa: F841

        if self.tag_uri:
            json_schema["$schema"] = self.schema_dialect
            json_schema["id"] = f"{self.tag_uri}/schema"

        # TODO: Convert jsonschema 2020-12 to ASDF schema
        if "$defs" in json_schema:
            json_schema["definitions"] = json_schema.pop("$defs")

        # Order keys
        json_schema = {
            **{
                key: json_schema[key]
                for key in DESIRED_ASDF_SCHEMA_KEY_ORDER
                if key in json_schema
            },
            **json_schema,  # Rest of the keys not in order list
        }

        return json_schema


class WithAsdfSchema(WithJsonSchema):
    def __init__(self, asdf_schema: dict, **kwargs):
        super().__init__(asdf_schema, **kwargs)


def AsdfTag(tag: str, mode: Literal["auto", "ref", "tag"] = "auto") -> WithAsdfSchema:
    if mode == "auto":
        parsed_mode = "tag" if tag.startswith("tag") else "ref"
    else:
        parsed_mode = mode

    if parsed_mode == "tag":
        return WithAsdfSchema({"tag": tag})
    else:
        return WithAsdfSchema({"$ref": tag})


def generate_resource_mapping(
    mod: str | ModuleType, path: str
) -> DirectoryResourceMapping:
    """Generates a resource mapping for ASDF schemas generated by `AsdfPydanticConverter`."""
    import importlib.resources

    return DirectoryResourceMapping(
        importlib.resources.files(mod) / path, uri_prefix="foobar"
    )


def generate_schema_files(
    mod: str | ModuleType,
    generated_path: str | Path,
    file_pattern: str = r".*?/([^/]+)(/schema)?$",
    file_extension: Literal[".yml", ".yaml"] = ".yaml",
):
    """Generates schema files for all {py:class}`AsdfPydanticModel` in the given module.

    Example:

        from asdf_pydantic.schema import generate_schema_files

        generate_schema_files("mypackage.models", "/path/to/mypackage/generated/")
    """
    from asdf_pydantic.model import AsdfPydanticModel

    if isinstance(generated_path, str):
        generated_path = Path(generated_path)

    if isinstance(mod, str):
        mod = importlib.import_module(mod)

    models = [
        klass
        for _, klass in inspect.getmembers(mod, inspect.isclass)
        if issubclass(klass, AsdfPydanticModel)
    ]

    schema_file_path_and_content = {}
    for model in models:
        # FIXME: Use all uris instead of just the first
        schema: str = model.model_asdf_schema()
        schema_uri: str = model.get_tag_definition().schema_uris[0]

        if match := re.search(file_pattern, schema_uri):
            schema_file_stem: str = match.group(1)
        else:
            raise ValueError(
                f"Schema URI '{schema_uri}' does not match the provided file pattern '{file_pattern}'"
            )

        schema_file_path = generated_path / f"{schema_file_stem}{file_extension}"

        schema_file_path_and_content[schema_file_path] = schema

    # Make backup
    backup_generated_path = generated_path.with_suffix(".bak")
    if generated_path.exists():
        generated_path.rename(backup_generated_path)

    try:
        # Write to generated dir
        generated_path.mkdir(parents=True, exist_ok=True)
        for file_path, content in schema_file_path_and_content.items():
            log.warning("Writing schema file to %s", file_path)
            with open(file_path, "w") as f:
                f.write(content)
    except Exception as e:
        # Restore backup
        generated_path.with_suffix(".bak").rename(generated_path)
        raise e
    else:
        # Delete backup
        if backup_generated_path.exists():
            shutil.rmtree(backup_generated_path)


if __name__ == "__main__":
    import os
    import sys

    log.setLevel(os.getenv("LOG_LEVEL", "WARNING").upper())

    if len(sys.argv) < 3:
        print("Usage: python -m asdf_pydantic.schema <module> <generated_path>")
        sys.exit(1)

    match sys.argv:
        case [_, module_name, generated_path]:
            generate_schema_files(module_name, generated_path)
        case [_, module_name, generated_path, file_pattern]:
            generate_schema_files(
                module_name, generated_path, file_pattern=file_pattern
            )
        case _:
            print(
                "Usage: python -m asdf_pydantic.schema <module> <generated_path> [file_pattern]"
            )
            sys.exit(1)
